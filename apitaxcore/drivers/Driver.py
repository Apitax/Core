from apitaxcore.models.State import State
from apitaxcore.config.Config import Config as ConfigConsumer
from apitaxcore.flow.responses.ApitaxResponse import ApitaxResponse
from apitaxcore.flow.requests.ApitaxRequest import ApitaxRequest
from apitaxcore.builders.HeaderBuilder import HeaderBuilder
from apitaxcore.builders.BodyBuilder import BodyBuilder
from apitaxcore.catalog.EndpointCatalog import EndpointCatalog

from apitaxcore.models.Credentials import Credentials
from apitaxcore.models.User import User


# Base class for driver plugs
# Defines many customizable properties for interfacing to a new API type
class Driver:

    def __init__(self):
        self.config = State.config
        self.driverConfig = None
        if (self.isDriverConfigurable()):
            self.driverConfig = ConfigConsumer.read(sectionName=self.getDriverName())
            # self.driverConfig = ConfigConsumer.read(sectionName=self.__class__.__name__)

    ##################
    # DRIVER METHODS #
    ##################

    # Whether the driver has custom configuration
    def isDriverConfigurable(self) -> bool:
        return False

    # Whether the driver supports providing a backend for Apitax authentication
    def isDriverAuthenticatable(self) -> bool:
        return False

    # Whether this driver requires a specific apitax user role to use
    def isDriverRoleRestricted(self) -> bool:
        return False

    # Whether the driver can only be used by certain users
    def isDriverWhitelisted(self) -> bool:
        return False

    # Whether certain users cannot use this driver
    def isDriverBlacklisted(self) -> bool:
        return False

    # Returns the driver specific config
    def getDriverConfig(self) -> ConfigConsumer:
        return self.driverConfig

    # Returns the name of the driver
    def getDriverName(self) -> str:
        return ''

    # Returns a short description of the driver
    def getDriverDescription(self) -> str:
        return ''

    # Returns a URL to an external webpage where someone can read help on the driver
    def getDriverHelpEndpoint(self) -> str:
        return ''

    # Returns a short sentence or two used after scripts finish processing
    def getDriverTips(self) -> str:
        return ''

    # If driver is role restricted, this is the minimum role required
    def getDriverMinimumRole(self) -> str:
        return ''

    # If driver is whitelisted, returns the whitelist
    def getDriverWhitelist(self) -> dict:
        return {}

    # If driver is blacklisted, return the blacklist
    def getDriverBlacklist(self) -> dict:
        return {}

    ##################
    # API METHODS #
    ##################

    # Whether the API is gated by authentication
    def isApiAuthenticated(self) -> bool:
        return False

    # Whether the API uses a separate API request to generate a token or some other task
    def isApiAuthenticationSeparateRequest(self) -> bool:
        return False

    # Returns whether an API endpoint catalog can be generated by this driver
    def isApiCataloggable(self) -> bool:
        return False

    # Whether an API uses tokens or not
    def isApiTokenable(self) -> bool:
        return False

    # If api is authenticated and uses a separate request, returns the api auth endpoint
    def getApiAuthEndpoint(self) -> str:
        return ''

    # If api is cataloggable, return the catalog endpoint
    def getApiCatalogEndpoint(self) -> str:
        return ''

    # Get base endpoint to reach the API
    def getApiBaseEndpoint(self) -> str:
        return ''

    # Returns the endpoint catalog
    def getApiEndpointCatalog(self) -> EndpointCatalog:
        return EndpointCatalog()

    # If api uses tokens, return the token from the auth response
    def getApiToken(self, response: ApitaxResponse) -> Credentials:
        return Credentials()

    # Returns the api auth type
    # (None, Basic, Bearer, Body etc.)
    def getApiAuthType(self) -> str:
        return ''

    # Return a default set of api credentials
    def getDefaultApiCredentials(self) -> Credentials:
        return Credentials()

    # Returns the api format
    #  (None, json, xml, text)
    def getApiFormat(self) -> str:
        return ''

    # Returns the api status
    # (None, up, down, maintenance etc.)
    def getApiStatus(self) -> str:
        return 'up'

    # Returns a short description of the api
    def getApiDescription(self) -> str:
        return ''

    # Returns a URL to externally hosted api help docs
    def getApiDocsEndpoint(self) -> str:
        return ''

    # Authenticate against the API
    def authenticateApi(self, credentials: Credentials) -> ApitaxResponse:
        return ApitaxResponse()

    # Add auth header to auth requests if applicable
    def addApiAuthHeader(self, credentials: Credentials, headerBuilder: HeaderBuilder) -> HeaderBuilder:
        return headerBuilder

    # Add headers to all request if applicable
    def addApiHeaders(self, headerBuilder: HeaderBuilder) -> HeaderBuilder:
        return headerBuilder

    # Add auth body to auth requsts if applicable
    def addApiAuthBody(self, credentials: Credentials, bodyBuilder: BodyBuilder) -> BodyBuilder:
        return bodyBuilder

    # Add body to all requests if applicable
    def addApiBody(self, bodyBuilder: BodyBuilder) -> BodyBuilder:
        return bodyBuilder

    ##################
    # APITAX METHODS #
    ##################

    # Whether or not Apitax auth is based upon the ApiAuth
    def isApitaxAuthBasedOnApiAuth(self) -> bool:
        return False

    # Authenticate apitax using either auth if apitax auth is based on the api auth or credentials otherwise
    # Returns the users role
    def authenticateApitax(self, credentials: Credentials = None) -> str:
        return ''

    # Create an apitax user
    def createApitaxUser(self, user: User) -> bool:
        return False

    # Update an apitax user
    def saveApitaxUser(self, user: User) -> bool:
        return False

    # Returns an apitax user
    def getApitaxUser(self, user: User) -> User:
        return user

    # Delete an apitax user
    def deleteApitaxUser(self, user: User) -> bool:
        return False

    # Event handler fired before an apitax request is executed
    def onPreApitaxRequest(self, request: ApitaxRequest) -> ApitaxRequest:
        return request

    # Event handler fired after an apitax request is executed
    def onPostApitaxRequest(self, request: ApitaxRequest) -> ApitaxRequest:
        return request

    # Event handler fired before an Apitax response is generated
    def onPreApitaxResponse(self, response: ApitaxResponse) -> ApitaxResponse:
        return response

    # Event handler fired after an apitax response is generated
    def onPostApitaxResponse(self, response: ApitaxResponse) -> ApitaxResponse:
        return response
